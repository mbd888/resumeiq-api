"""Create all tables

Revision ID: ca40e4aab19c
Revises: 
Create Date: 2025-08-17 11:56:41.150125

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'ca40e4aab19c'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('username', sa.String(length=100), nullable=False),
    sa.Column('full_name', sa.String(length=255), nullable=True),
    sa.Column('hashed_password', sa.String(length=255), nullable=False),
    sa.Column('user_type', sa.Enum('RECRUITER', 'JOB_SEEKER', 'ADMIN', name='usertype'), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('is_verified', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_users'))
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_table('job_descriptions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('company', sa.String(length=255), nullable=True),
    sa.Column('location', sa.String(length=255), nullable=True),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('required_skills', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('preferred_skills', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('experience_required', sa.String(length=50), nullable=True),
    sa.Column('education_required', sa.String(length=100), nullable=True),
    sa.Column('salary_min', sa.Integer(), nullable=True),
    sa.Column('salary_max', sa.Integer(), nullable=True),
    sa.Column('salary_currency', sa.String(length=3), nullable=True),
    sa.Column('benefits', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('job_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('is_active', sa.String(length=20), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('expires_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_job_descriptions_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_job_descriptions'))
    )
    op.create_index(op.f('ix_job_descriptions_title'), 'job_descriptions', ['title'], unique=False)
    op.create_table('resumes',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('filename', sa.String(length=255), nullable=False),
    sa.Column('file_path', sa.String(length=500), nullable=False),
    sa.Column('file_size', sa.Integer(), nullable=False),
    sa.Column('file_type', sa.String(length=50), nullable=False),
    sa.Column('raw_text', sa.Text(), nullable=True),
    sa.Column('parsed_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('candidate_name', sa.String(length=255), nullable=True),
    sa.Column('candidate_email', sa.String(length=255), nullable=True),
    sa.Column('candidate_phone', sa.String(length=50), nullable=True),
    sa.Column('position_applied', sa.String(length=255), nullable=True),
    sa.Column('status', sa.Enum('PENDING', 'PROCESSING', 'COMPLETED', 'FAILED', name='resumestatus'), nullable=False),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('uploaded_at', sa.DateTime(), nullable=False),
    sa.Column('processed_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_resumes_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_resumes'))
    )
    op.create_table('analyses',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('resume_id', sa.UUID(), nullable=False),
    sa.Column('extracted_skills', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('technical_skills', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('soft_skills', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('total_experience_years', sa.Float(), nullable=True),
    sa.Column('experience_level', sa.String(length=50), nullable=True),
    sa.Column('work_history', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('education_level', sa.String(length=100), nullable=True),
    sa.Column('education_details', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('contact_info', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('ats_score', sa.Integer(), nullable=True),
    sa.Column('completeness_score', sa.Integer(), nullable=True),
    sa.Column('languages', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('certifications', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('projects', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('achievements', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('ner_entities', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('skills_confidence', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('analyzed_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['resume_id'], ['resumes.id'], name=op.f('fk_analyses_resume_id_resumes')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_analyses')),
    sa.UniqueConstraint('resume_id', name=op.f('uq_analyses_resume_id'))
    )
    op.create_table('job_matches',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('resume_id', sa.UUID(), nullable=False),
    sa.Column('job_id', sa.UUID(), nullable=False),
    sa.Column('overall_score', sa.Float(), nullable=False),
    sa.Column('skills_match_score', sa.Float(), nullable=True),
    sa.Column('experience_match_score', sa.Float(), nullable=True),
    sa.Column('education_match_score', sa.Float(), nullable=True),
    sa.Column('matched_skills', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('missing_skills', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('matched_keywords', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('strengths', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('gaps', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('recommendations', sa.Text(), nullable=True),
    sa.Column('rank', sa.Integer(), nullable=True),
    sa.Column('matched_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['job_id'], ['job_descriptions.id'], name=op.f('fk_job_matches_job_id_job_descriptions')),
    sa.ForeignKeyConstraint(['resume_id'], ['resumes.id'], name=op.f('fk_job_matches_resume_id_resumes')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_job_matches'))
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('job_matches')
    op.drop_table('analyses')
    op.drop_table('resumes')
    op.drop_index(op.f('ix_job_descriptions_title'), table_name='job_descriptions')
    op.drop_table('job_descriptions')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###
